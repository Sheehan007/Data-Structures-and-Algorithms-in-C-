#include <iostream>
#include<bits/stdc++.h>
#include<vector>
#include<algorithm>
#include<string>
#include<cmath>
#include<utility>

using namespace std;

bool isSafe(vector<vector<char>> &board, int row, int col, int dig) {
    //horizontal
    for (int j=0; j<9; j++) {
        if (board[row][j] == dig) {
            return false;
        }
    }

    //vertical
    for (int i=0; i<9; i++) {
        if (board[i][col] == dig) {
            return false;
        }
    }

    //grid
    int srow = (row/3)*3;
    int scol = (col/3)*3;
    for (int i=srow; i<srow+3; i++) {
        for (int j=scol; j<scol+3; j++) {
            if (board[i][j] == dig) {
                return false;
            }
        }
    }

    return true;
}

bool backtrack(vector<vector<char>> &board, int row, int col) {
    if (row == 9) {
        return true;
    }

    int nextrow = row, nextcol = col + 1; 
    if (nextcol == 9) {
        ++nextrow;
        nextcol = 0;
    }

    if (board[row][col] != '.') {
        return backtrack(board, nextrow, nextcol);
    }

    
    for (char dig='1'; dig<='9'; dig++) {
        if (isSafe(board, row, col, dig)) {
            board[row][col] = dig;
            if (backtrack (board, nextrow, nextcol)) {
                return true;
            }

            board[row][col] = '.';
        }
    }

    return false;
}

void solverSudoku (vector<vector<char>> &board) {
    backtrack (board, 0, 0);
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    vector<vector<char>> board(9, vector<char>(9));
    for (int i=0; i<9; i++) {
        string s;
        cin >> s;
        for (int j=0; j<9; j++) {
            board[i][j] = s[j];
        }
    }

    solverSudoku(board);

    for (int i=0; i<9; i++) {
        for (int j=0; j<9; j++) {
            cout << board[i][j];
        }
        cout << endl;
    }

    return 0;

    }
