#include <iostream>
#include<bits/stdc++.h>
#include<vector>
#include<algorithm>
#include<climits>
#include<string>
#include<cmath>
#include<unordered_set>
#include<utility>
#include<bitset>

using ll = long long;
using namespace std;

int partition(vector<int> &arr, int st, int end) {
    int idx=st-1, pivot=arr[end];

    for (int j=st; j<end; j++) {
        if (arr[j] <= pivot) {
            idx++;
            swap(arr[j], arr[idx]);
        }
    }

    idx++;
    swap(arr[end], arr[idx]);
    return idx;

}

void quicksort(vector<int> &arr, int st, int end) {
    if (st < end) {
        int pividx = partition(arr, st, end);
        quicksort(arr, st, pividx-1);
        quicksort(arr, pividx+1, end);
    }
}


int main() {
    vector<int> arr = {5,2,6,4,1,3};
    quicksort(arr, 0, arr.size()-1);
    
    for (int val : arr) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}

// time compl. (best case) = O(nlogn)
// time compl. (worst case) = O(n^2) only when pivot is the smallest or largest element of the array

// space compl. = O(1)

OUTPUT: 
1 2 3 4 5 6

