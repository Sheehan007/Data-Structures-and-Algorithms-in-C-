#include <iostream>
#include<bits/stdc++.h>
#include<vector>
#include<algorithm>
#include<climits>
#include<string>
#include<cmath>
#include<unordered_set>
#include<utility>
#include<bitset>

using namespace std;

bool isvalid(vector<vector<int>> &grid, int r, int c, int n, int expval) {
    if (r<0 || c<0 || r>=n || c>=n || grid[r][c] != expval) {
        return false;
    }

    if (expval == n * n-1) {
        return true;
    }

    return isvalid(grid, r - 2, c + 1, n, expval + 1) ||
           isvalid(grid, r - 1, c + 2, n, expval + 1) ||
           isvalid(grid, r + 1, c + 2, n, expval + 1) ||
           isvalid(grid, r + 2, c + 1, n, expval + 1) ||
           isvalid(grid, r + 2, c - 1, n, expval + 1) ||
           isvalid(grid, r + 1, c - 2, n, expval + 1) ||
           isvalid(grid, r - 1, c - 2, n, expval + 1) ||
           isvalid(grid, r - 2, c - 1, n, expval + 1);
}

bool validgrid(vector<vector<int>> &grid) {
    return isvalid(grid, 0, 0, grid.size(), 0);
}

int main() {
    int n;
    cout << "Enter grid size n (n x n): ";
    cin >> n;

    vector<vector<int>> grid(n, vector<int>(n));
    cout << "Enter the knight tour grid (" << n*n << " values):\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> grid[i][j];

    if (validgrid(grid)) {
        cout << "Valid Knight's Tour\n";
    } 
    
    else {
        cout << "Invalid Knight's Tour\n";
    }

    return 0;
}
